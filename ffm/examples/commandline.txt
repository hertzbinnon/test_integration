ffmpeg -v debug  -re  -i udp://127.0.0.1:12346 -c copy  -f mpegts udp://192.168.8.62:12346
ffmpeg -ss 00:00:00  -t 00:01:07 -i music_1.mp3 -c copy  music_2.mp3
ffmpeg -ss 00:00:00   -i music_1.mp3 -c copy  -t 00:01:07 music_2.mp3
ffmpeg -ss 1:23.111  -t 2:12.321 -i music_1.mp3 -c copy  -t 00:01:07 music_2.mp3
ffmpeg -f concat -safe 0 -i list.txt -c copy bs-mms-player.mp3
#ffmpeg -i "concat:1.mpg|2.mpg|3.mpg" -c copy output.mp4 # error
ffmpeg -i 0.flv -f asf - | vlc -
ffmpeg -v quiet -i /home/hebin/klg.ts -c copy -f mpegts - > /tmp/klg.ts
ffmpeg -v quiet -re -i /home/hebin/klg.ts -c copy -f mpegts - | gst-launch-1.0 fdsrc fd=0 ! udpsink  host=192.168.8.62 port=12346
ffmpeg -v quiet -re -i /home/hebin/klg.ts -c copy -f mpegts - | python gst-demuxerbin.py
ffmpeg -v quiet -re  -i /home/hebin/2-2.ts  -c copy -f mpegts - | ./bin/vlc-static fd://0  -vvv --sout="#std{access=udp,mux=ts,dst=192.168.8.62:12346}"
ffmpeg -v quiet -re  -i /home/hebin/2-2.ts  -c copy -f mpegts - | ./bin/vlc-static - -vvv --sout="#std{access=udp,mux=ts,dst=192.168.8.62:12346}" # vlc must be close all interface 
ffmpeg -report -re -fflags +genpts -fflags nobuffer -probesize 50 -analyzeduration 100 -stream_loop -1 -i /home/hebin/CHC/100M.mp4 -acodec copy -f flv rtmp://localhost:1936/big/test
# backgroud executing 
nohup ./ffmpeg -report -re -fflags +genpts -fflags nobuffer -probesize 50 -analyzeduration 100 -stream_loop -1 -i /home/fjcmcc/100M.mp4 -c:v copy -acodec copy  -f flv rtmp://localhost/big/test > /dev/null 2>&1 &

ffmpeg -nostats -report  -i /home/hebin/hunan2.ts -filter:a volumedetect -vn -sn -dn  -f null /dev/null

ffmpeg -i /home/hebin/2-2.ts -vf "select='eq(pict_type,I)', showinfo" -f mpegts /dev/null
ffmpeg -i /home/hebin/2-2.ts -filter_complex "select='gt(scene,0.3)',metadata=print:file=time.txt" -vsync vfr img%03d.png

ffmpeg -re -i CHC_frag.ts -c copy -map 0 -f segment -segment_list playlist.m3u8 -segment_time 15 chc_%5d.ts
ffmpeg -re -i CHC.ts -g 50 -strict experimental -c:a aac -ab 64k -c:v libx264 -vb 3M -f mp4 -movflags frag_keyframe+empty_moov out_put.mp4
./ffmpeg -i /media/hertz/b901d1b9-1b63-46ca-a706-86f7401fee63/hebin/4K体验视频.mp4 -r 25 -f mpegts -c:v hevc_nvenc  -minrate 7M -maxrate 7M -b:v 7M  -y /tmp/ffm.ts
./ffmpeg -i /media/hertz/b901d1b9-1b63-46ca-a706-86f7401fee63/hebin/4K体验视频.mp4 -r 25 -f mpegts -c:v h264_nvenc  -minrate 7M -maxrate 7M -b:v 7M  -y /tmp/ffm.ts
ffmpeg -i /home/hebin/Game.Of.Thrones.S01.E09.2011.1080p.mkv -map 0:0 -map 0:1 -c:v copy -c:a libfdk_aac -b:a 128k -profile:a aac_he  -y /home/hebin/_Game1080p.ts

ffmpeg -hwaccel_device 0 -c:v h264_cuvid -i 4k5.mp4 -c:v rawvideo -pix_fmt yuv420p 4k5.yuv
ffmpeg -hwaccel_device 0 -hwaccel cuvid -c:v h264_cuvid -i input -vf scale_npp=-1:720 -c:v h264_nvenc -preset slow output.mkv
ffmpeg -re -hwaccel_device 0 -hwaccel cuvid -c:v h264_cuvid -i rtmp://114.116.250.228/live/4k -preset fast -qmin 20 -c:v h264_nvenc -vf scale_npp=1920:1080 -b:v 15000k -g 30 -c:a aac -strict -2 -ar 48000 -b:a 200K -f flv rtmp://114.116.250.228/live/cch_2k

ffmpeg -s 3840x2160 -r 24 -pix_fmt yuv420p -i out.yuv  ads_png/image-%3d.png
ffmpeg -s 3840x2160 -r 24 -i 4k5.yuv -vf "movie=ads_png/image-261.png[a];[a]colorkey=0x00FFFFFF:0.6:1.0[b];[in][b]overlay[c]" -c:v rawvideo -pix_fmt yuv420p  -f null -
ffmpeg -i 4k5.mp4 -vf "movie=4k6.mp4[a];[a]colorkey=0x000000:0.6:0.5[b];[in][b]overlay=x=W-w-10:y=0[c]" -f mp4 -y combined.mp4
ffmpeg -hwaccel_device 0 -c:v h264_cuvid -i 4k5.mp4 -c:v h264_nvenc -c:a copy  -vf "movie=4k6.mp4[a];[a]chromakey=0x000000:0.6:0.5[b];[in][b]overlay[c]" -f mp4 -y 1.mp4
ffmpeg -hwaccel_device 0 -c:v h264_cuvid -i 4k5.mp4 -c:v h264_nvenc -c:a copy -filter_complex_threads 0 -b:v 10M  -vf "movie=4k6.mp4[a];[a]colorkey=0x00FFFFFF:0.6:1.0[b];[in][b]overlay[c]" -f mp4 -y 1.mp4v
#subpicture
ffmpeg -rtbufsize 1000M -f dshow -i video="screen-capture-recorder" -f dshow -i video="Logitech Webcam C930e" -vcodec libx264  -s 1280*720 -r 15 -preset:v ultrafast -tune:v zerolatency -filter_complex "[1:v]scale=w=352:h=288:force_original_aspect_ratio=decrease[ckout];[0:v][ckout]overlay=x=W-w-10:y=0[out]" -map "[out]" -movflags faststart merge.mp4
#实现每隔10秒交替出现logo
ffmpeg -y -t 60 -i input.mp4 -i logo1.png -i logo2.png -filter_complex "overlay=x=if(lt(mod(t\,20)\,10)\,10\,NAN ):y=10,overlay=x=if(gt(mod(t\,20)\,10)\,W-w-10\,NAN ) :y=10" output.mp4 
#实现跑马灯
ffmpeg -i input1 -i input2 -vcodec libx264 -an -filter_complex "overlay=x='if(gte(t,2), -w+(t-2)*20, NAN)':y=0" -s 320x240 output.mp4
#实现2秒后logo从左到右移动
ffmpeg -i input.mp4 -vf "movie=logo.png[logo];[in][logo]overlay=x='if(gte(t\,2)\,((t-2)*80)-w\,NAN)'" output.mp4
#实现gif格式的logo循环命令
ffmpeg -i video.mpg -ignore_loop 0 -i loop.gif -filter_complex  "[0:v][1:v]overlay=10:10:shortest=1" -vcodec mpeg2video out.mpg
#实现视频添加字幕
ffmpeg  -i  input  -vf  drawtext=fontfile=arial.ttf:text=welcome output
#实现周期显示输入的文字水印
ffmpeg -i input.mp4 -vf "drawtext=fontfile=/usr/share/fonts/truetype/freefont/FreeSerif.ttf:text='testtest':x=w-100:y=100:enable=lt(mod(t\,3)\,1):fontsize=24:fontcolor=yellow@0.5:shadowy=2" output.mp4
ffmpeg -i input.jpg -vf "drawtext=text='Test Text':fontcolor=white:fontsize=75:x=1002:y=100:" output.jpg

ffmpeg -itsoffset 1  -i rtmp://117.50.7.118/live/ch0  -f dshow -i audio="Microphone (Realtek(R) Audio)" -map 0:1 -map 1:0  -f flv rtmp://117.50.7.118/live/test
ffmpeg  -i rtmp://117.50.7.118/live/ch0  -f dshow -itsoffset 3  -i audio="Microphone (Realtek(R) Audio)"  -c:a aac  -map 0:1 -map 1:0  -f flv rtmp://117.50.7.118/live/test
ffmpeg -f dshow -i video="screen-capture-recorder":audio="Stereo Mix (Realtek(R) Audio)" -c:a aac -ar 48k -ab 128k -y output.mkv
ffmpeg -list_devices true -f dshow -i dummy

#set tbn
./ffmpeg -i daojishioutput1.mp4 -c:v h264_nvenc -b:v 10M -video_track_timescale 25 -c:a aac -ar 48k -ab 128k -f mp4 -movflags frag_keyframe+empty_moov -y daojishioutput2.mp4
ffmpeg -f dshow -i video="screen-capture-recorder":audio="Stereo Mix (Realtek(R) Audio)" -c:v libx264 -r 25 -b:v 1M -bf 0 -s 3840x1920 -preset 0 -video_track_timescale 25  -c:a aac -ar 48k -ab 128k -ac 2 -y output.mp4
ffmpeg -f dshow -i video="screen-capture-recorder":audio="Stereo Mix (Realtek(R) Audio)" -c:v libx264 -r 25 -b:v 1M -s 3840x1920 -preset 0 -pix_fmt yuv420p  -bf 0 -video_track_timescale 25  -c:a aac -ar 48k -ab 128k  -f mp4 -movflags frag_keyframe+empty_moov  -y output.mp4

#delay video
ffmpeg  -i rtmp://117.50.19.251/live/ch6 -itsoffset 3  -i rtmp://117.50.19.251/live/ch6  -c:a copy -c:v copy -map 0:a -map 1:v  -f flv rtmp://117.50.19.251/live/test

#delay audio 
ffmpeg -i rtmp://10.9.91.51/live/ch6 -itsoffset 3 -i rtmp://10.9.91.51/live/ch6 -c:a copy -c:v copy -map 0:v -map 1:a -f flv rtmp://10.9.91.51/live/test
#360
./ffmpeg -i ../../../../../../4k/ASMR\ VR360\ _\ Affectionate\ Cat\ Girlfriend\ _\ VTuber\ Scenarios-4k.mp4 -vf v360=eac:e_pad=0.01 test.mp4
./ffmpeg -i ../../../../../../4k/ASMR\ VR360\ _\ Affectionate\ Cat\ Girlfriend\ _\ VTuber\ Scenarios-4k.mp4 -vf v360=eac:e test.mp4
./ffmpeg -i ../../../../../../4k/ASMR\ VR360\ _\ Affectionate\ Cat\ Girlfriend\ _\ VTuber\ Scenarios-4k.mp4 -b:v 10M -vf v360=eac:e test.mp4
./ffmpeg -i ../../../../../vrProjector/images/bottom.png -vf v360=c3x2:e test.png
./ffmpeg -i ../../../../../vrProjector/images/bottom.png -vf v360=e:e test.png

#
#
#ffmpeg -hide_banner   -i test.png  -vf v360=fisheye:e  -y test-equi.png
#ffmpeg -hide_banner   -i test-equi.png  -vf v360=e:e:yaw=10:pitch=10 -y test-equi-rotated.png
#ffmpeg -hide_banner   -i test-equi-rotated.png -vf v360=e:flat -y test-flat.png
#ffmpeg -hide_banner   -i test-flat.png  -vf v360=flat:e,colorkey=0xFFFFFF:0.1 	-y test-overlay-rotated.png
#ffmpeg -hide_banner   -i test-overlay-rotated.png  -vf v360=e:e:pitch=-10:yaw=-10 -y test-overlay-back.png
#ffmpeg -i test-equi.png -i test-overlay-back.png -filter_complex overlay -y test-final.png

# 0 track start from 5s and track 1 start from 10s
./ffmpeg -i rtmp://10.9.126.203/live/hong -map 0:0 -ss 5  -map 0:1 -ss 10  -c copy  -f flv rtmp://10.9.112.161/live/test
ffmpeg  -i jiuselu.mp4  -i yidonghuoban.mp4  -map 0:0 -map 1:1 -c copy  -f mp4 -y test.mp4

ffmpeg -threads 2  -re -fflags +genpts  -stream_loop -1 -i /data/XiangGeLiLa.mp4 -c:v copy -acodec copy -f flv rtmp://127.0.0.1/live/ch5

# make a alpha.png
#https://stackoverflow.com/questions/46315483/ffmpeg-create-a-transparent-background-with-lavfi
ffmpeg.exe -y -f lavfi -i "color=color=white@0.0:size=3840x1920,format=rgba" -q:v 2 -vframes 1 -r 1  -c:v png  -update 1 2.png
./ffmpeg   -y -f lavfi -i "color=color=white@0.0:size=3840x1920,format=rgba" -q:v 2 -vframes 1 -r 1  -c:v png  -update 1 alpha.png
#
ffmpeg.exe -y -f lavfi -i "color=color=white@0.0:size=1920x1080,format=rgba,subtitles=test.ass:alpha=1" -c:v png -t "00:01:00.000" -threads 0 "video.mov" -stats
#
#./ffmpeg -y -f lavfi -i color=s=1920x1080:color=0xff0000 -r 1 -an -c:v png -update 1  -y alpha.png
 
/data/ffmpeg -i /tmp/alpha.png -q:v 4 -r 1 -s 3840x960 -update 1 output1.png
/data/ffmpeg -i /tmp/output1.png -i /tmp/botum.png -filter_complex vstack bottom.png
/data/ffmpeg -i /tmp/output1.png -i /tmp/botum.png -filter_complex hstack bottom.png

ffmpeg -r 25 -start_number 0001 -i Image_%04d.JPG -s 3840x1920 -vcodec libx264 -b:v 10M -pix_fmt yuv420p video_out.mp4 #Image_0001.JPG, 0001 is the start number


#Given a VFR recording screen.mkv with a maximum frame rate of 30 fps, you can convert it to CFR at 30 fps with the following command:
ffmpeg -i screen.mkv -vsync cfr -r 30 screen_cfr.mkv

./ffmpeg -y -hide_banner  -i ./360-dual-fisheye.jpg -vf "crop=320:320:0:0" -y righteye.png
./ffmpeg -y -hide_banner  -i ./360-dual-fisheye.jpg -vf "crop=320:320:320:0" -y lefteye.png
./ffmpeg -r:v 30 -loop 1 -i righteye.png -c:v h264_nvenc  -pix_fmt yuv420p  -g 30  left.mp4
./ffmpeg -r:v 30 -loop 1 -i lefteye.png -c:v h264_nvenc  -pix_fmt yuv420p  -g 30  right.mp4
nohup /data/ffmpeg -threads 2  -report -re -fflags +genpts -stream_loop -1 -i right.mp4 -c:v copy -acodec copy -f flv rtmp://127.0.0.1/live/right > /dev/null 2>&1 &
nohup /data/ffmpeg -threads 2  -report -re -fflags +genpts -stream_loop -1 -i left.mp4 -c:v copy -acodec copy -f flv rtmp://127.0.0.1/live/left > /dev/null 2>&1 &

#### ffmpeg 4.4
./ffmpeg  -hwaccel cuda -hwaccel_output_format cuda -c:v hevc_cuvid  -i /opt/root/tmp/4k.mp4 -r 30 -vf scale_npp=-1:720  -c:v hevc_nvenc  -minrate 7M -maxrate 7M -b:v 7M  -c:a copy -f mp4  -y /tmp/4k.mp4

./ffmpeg -h encoder=hevc_nvenc

#https://superuser.com/questions/1380946/how-do-i-convert-10-bit-h-265-hevc-videos-to-h-264-without-quality-loss#:~:text=10-bit%2F12-bit%20HEVC%20to%208-bit%20HEVC%20ffmpeg%20-i%20input,value%20to%20provide%20the%20desired%20level%20of%20quality.
# 10bit to 8bit
./ffmpeg  -i P7-mc48.ts   -c:v hevc_nvenc -vf format=yuv420p -g 30  -preset fast  -profile:v main  -minrate 8M -maxrate 8M -b:v 8M -c:a libfdk_aac -b:a 128k p7.ts
# 12bit to 10bit
./ffmpeg  -i P7-mc48.ts   -c:v hevc_nvenc -vf format=yuv420p10le -g 30  -preset fast  -profile:v main  -minrate 8M -maxrate 8M -b:v 8M -c:a libfdk_aac -b:a 128k p7.ts


# push stream shell
for((;;)); do \
        ./objs/ffmpeg/bin/ffmpeg -re -i ./doc/source.200kbps.768x320.flv \
        -vcodec copy -acodec copy \
        -f flv -y rtmp://192.168.1.170/live/livestream; \
        sleep 1; \
done


# snapshot
ffmpeg -ss 00:00:00  -i ../../../../4k/4K_Travel_Beijing_Tourism_360_2D_100M.mp4 -frames:v 1 -s 480x240 -f image2 -y output.jpg
#time ffmpeg  -i ../../../../4k/4K_Travel_Beijing_Tourism_360_2D_100M.mp4 -ss 00:00:00 -frames:v 1 -f image2 -y output.jpg

# 2D to 3D
https://wiki.multimedia.cx/index.php?title=How_to_make_a_3d_movie_with_ffmpeg
## how to combine two seperate videos into one left-right 3d video
## just want to play two files side by side

ffplay -i inputleft.avi -vf "movie=inputright.avi [in1]; [in]pad=iw*2:ih:iw:0[in0]; [in0][in1] overlay=0:0 [out]"
ffplay -codec:v h264_cuvid  -i Normal2D.mp4 -vf "movie=Normal2D.mp4 [in1]; [in]pad=iw*2:ih:iw:0[in0]; [in0][in1] overlay=0:0 [out]" -x 960 -y 480

combine seperate videos into one, side by side
ffmpeg -i inputleft.avi -vf "movie=inputright.avi [in1]; [in]pad=iw*2:ih:iw:0[in0]; [in0][in1] overlay=0:0 [out]" sidebyside.avi

MORE INFO: http://stackoverflow.com/questions/9293265/ffmpeg-2-videos-transcoded-and-side-by-side-in-1-frame http://stackoverflow.com/questions/7581665/multiple-video-sources-combined-into-one

## capture hdmi video and audio 
List Input Devices
ffmpeg -list_devices true -f dshow -i dummy
List Device Modes
ffmpeg -f dshow -list_options true -i video="USB Video"
Display (1080p 30fps)
ffplay -f dshow -video_size 1920x1080 -framerate 30 -vcodec mjpeg -i video="USB Video":audio="Digital Audio Interface (USB Digital Audio)"
Display (720p 60fps)
ffplay -f dshow -video_size 1280x720 -framerate 60 -vcodec mjpeg -i video="USB Video":audio="Digital Audio Interface (USB Digital Audio)"
Capture (1080p 30fps)
ffmpeg -f dshow -rtbufsize 100M -video_size 1920x1080 -framerate 30 -vcodec mjpeg -i video="USB Video":audio="Digital Audio Interface (USB Digital Audio)" -vcodec h264_qsv -b:v 7000k -acodec aac vid_1080p_30fps.mp4
Capture (720p 60fps)
ffmpeg -f dshow -rtbufsize 100M -video_size 1280x720 -framerate 60 -vcodec mjpeg -i video="USB Video":audio="Digital Audio Interface (USB Digital Audio)" -vcodec h264_qsv -b:v 7000k -acodec aac vid_720p_60fps.mp4
These ffmpeg commands are using a hardware accelerated codec for Intel Quicksync. On systems that don’t support Quicksync (e.g. AMD, Nvidia, etc…) use ‘libx264’ in place of h264_qsv.
